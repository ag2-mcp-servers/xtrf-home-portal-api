# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:29:03+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query, UploadFile
from starlette.requests import Request

from models import (
    AccessTokenDTO,
    AccountingCustomersInvoicesGetResponse,
    AccountingCustomersInvoicesIdsGetResponse,
    AccountingCustomersInvoicesInvoiceIdPaymentsGetResponse,
    AccountingProvidersInvoicesGetResponse,
    AccountingProvidersInvoicesIdsGetResponse,
    AccountingProvidersInvoicesInvoiceIdPaymentsGetResponse,
    ActionStartedDTO,
    AddressDTO,
    AssignVendorDTO,
    BigDecimalDTO,
    BrowserCsvGetResponse,
    BrowserGetResponse,
    BrowserViewsViewIdColumnsColumnNameDeleteResponse,
    BrowserViewsViewIdColumnsColumnNameSettingsGetResponse,
    BrowserViewsViewIdColumnsColumnNameSettingsPutRequest,
    BrowserViewsViewIdColumnsColumnNameSettingsPutResponse,
    BrowserViewsViewIdColumnsGetResponse,
    BrowserViewsViewIdColumnsPutResponse,
    BrowserViewsViewIdFilterFilterPropertyPutResponse,
    CategoriesDTO,
    CATToolProjectDTO,
    CommonLanguageCombinationDTO,
    CompetenciesDTO,
    ContactDTO,
    ContactsDTO,
    CurrencyHistoryDTO,
    CustomerDTO,
    CustomerInvoiceCreateResultDTO,
    CustomerInvoiceDatesDTO,
    CustomerInvoiceDTO,
    CustomerPersonDTO,
    CustomersGetResponse,
    CustomersIdsGetResponse,
    CustomersPersonsIdsGetResponse,
    CustomFieldDTO,
    CustomFieldsDTO,
    DictionaryEntity,
    ExternalFileDto,
    FileCategorizationsDto,
    FileDTO,
    FileDto,
    FileLinkCategorizationsDto,
    FileMetadataDTO,
    FilesArchiveDto,
    FilesDto,
    FilesShareStatusDto,
    FilterDTO,
    FilterPropertyDTO,
    FinanceDTO,
    GetLicenseResult,
    ImportResultDTO,
    IndustriesDTO,
    InstructionsDTO,
    InvitationStatisticsDTO,
    JobDatesDto,
    JobDto,
    JobFilesDTO,
    JobStatusDTO,
    LocalSettingsDTO,
    ManyValuesPerTypeDTO,
    OrderDTO,
    PayableCreateDTO,
    PayableDTO,
    PaymentTermsDTO,
    PermissionsDTO,
    PersonContactDTO,
    ProjectCreateDTO,
    ProjectDatesDTO,
    ProjectDTOv1,
    ProjectDTOv2,
    ProjectFileDto,
    ProjectsIdsGetResponse,
    ProjectStatusDTO,
    ProviderDTO,
    ProviderInvoiceCreateDTO,
    ProviderInvoiceCreateResultDTO,
    ProviderInvoiceDTO,
    ProviderPersonDTO,
    ProvidersIdsGetResponse,
    ProvidersPersonsIdsGetResponse,
    QuoteCreateDTO,
    QuoteDatesDTO,
    QuoteDTOv1,
    QuoteDTOv2,
    QuotesIdsGetResponse,
    ReceivableCreateDTO,
    ReceivableDTO,
    ReportResultDTO,
    SendRemindersResponseDTO,
    ServiceDTO,
    SettingsDTO,
    SmartContactsDTO,
    SmartCustomFieldDTO,
    SourceLanguageDTO,
    SpecializationDTO,
    StatusRequestDTO,
    StringDTO,
    SubscriptionGetResponse,
    TargetLanguagesDTO,
    TaskCreateDTO,
    TaskDTO,
    TaskFilesDTO,
    TaskProgressDTO,
    TimeDTO,
    TimeZoneDTO,
    UrlResultDTO,
    UserDTO,
    UsersGetResponse,
    V2JobsJobIdFilesDeliveredGetResponse,
    V2JobsJobIdFilesSharedReferenceFilesGetResponse,
    V2JobsJobIdFilesSharedWorkFilesGetResponse,
    V2ProjectsProjectIdFilesDeliverableGetResponse,
    V2ProjectsProjectIdFilesGetResponse,
    V2ProjectsProjectIdJobsGetResponse,
    V2QuotesQuoteIdFilesGetResponse,
    V2QuotesQuoteIdJobsGetResponse,
    VendorPriceProfileDTO,
    ViewDetailsDTO,
    ViewDTO,
    ViewsBriefDTO,
    ViewWithIdDTO,
)

app = MCPProxy(
    description='XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href="/home-api/openapi.json">here</a> <br>\n  The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href=\'https://editor.swagger.io/\'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: ',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://legal.xtrf.eu/2017/products/GeneralTermsAndConditions.pdf',
    title='XTRF Home Portal API',
    version='2.0',
    servers=[{'url': 'https://presentation.s.xtrf.eu/home-api'}],
)


@app.get(
    '/accounting/customers/invoices',
    description=""" Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices',
    description=""" Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported. """,
    tags=['invoice_management', 'invoice_document_generation'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_1():
    """
    Creates a new invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/documents',
    description=""" Generates client invoices' documents. """,
    tags=['invoice_management', 'invoice_document_generation'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def download_documents():
    """
    Generates client invoices' documents.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/ids',
    description=""" Returns client invoices' internal identifiers. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns client invoices' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/sendReminders',
    description=""" Sends reminders. Returns number of sent e-mails. """,
    tags=['reminder_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send_reminders():
    """
    Sends reminders. Returns number of sent e-mails.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounting/customers/invoices/{invoiceId}',
    description=""" Removes a client invoice. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_1(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Removes a client invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/{invoiceId}',
    description=""" Returns client invoice details. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id(
    invoice_id: int = Path(..., alias='invoiceId'), embed: Optional[str] = None
):
    """
    Returns client invoice details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/{invoiceId}/dates',
    description=""" Returns dates of a given client invoice. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_dates(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Returns dates of a given client invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/{invoiceId}/document',
    description=""" Generates client invoice document (PDF). """,
    tags=['invoice_management', 'invoice_document_generation'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_document(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Generates client invoice document (PDF).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/{invoiceId}/duplicate',
    description=""" Duplicate client invoice. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def duplicate(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Duplicate client invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/{invoiceId}/duplicate/proForma',
    description=""" Duplicate client invoice as pro forma. """,
    tags=['invoice_management', 'invoice_document_generation'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def duplicate_as_pro_forma(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Duplicate client invoice as pro forma.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/{invoiceId}/paymentTerms',
    description=""" Returns payment terms of a given client invoice. """,
    tags=['invoice_management', 'payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_payment_terms(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Returns payment terms of a given client invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/customers/invoices/{invoiceId}/payments',
    description=""" Returns all payments for the client invoice. """,
    tags=['invoice_management', 'payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_payments(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Returns all payments for the client invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/{invoiceId}/payments',
    description=""" Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated. """,
    tags=['invoice_management', 'payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payment(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/customers/invoices/{invoiceId}/sendReminder',
    description=""" Sends reminder. """,
    tags=['reminder_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send_reminder(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Sends reminder.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounting/customers/payments/{paymentId}',
    description=""" Removes a customer payment. """,
    tags=['payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_2(payment_id: int = Path(..., alias='paymentId')):
    """
    Removes a customer payment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/providers/invoices',
    description=""" Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_2(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/providers/invoices',
    description=""" Creates a new invoice from jobs. Jobs are grouped by provider and currency, therefore multiple invoices can be created.If any of the jobs cannot be invoiced (ie. it is already invoiced) then an error is reported. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_4(body: ProviderInvoiceCreateDTO):
    """
    Creates a new invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/providers/invoices/ids',
    description=""" Returns vendor invoices' internal identifiers. """,
    tags=['invoice_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_3(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns vendor invoices' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounting/providers/invoices/{invoiceId}',
    description=""" Removes a provider invoice. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_6(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Removes a provider invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/providers/invoices/{invoiceId}',
    description=""" Returns provider invoice details. """,
    tags=['invoice_management', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_3(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Returns provider invoice details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/providers/invoices/{invoiceId}/document',
    description=""" Generates provider invoice document (PDF). """,
    tags=['invoice_management', 'invoice_document_generation'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_document_1(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Generates provider invoice document (PDF).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounting/providers/invoices/{invoiceId}/payments',
    description=""" Returns all payments for the vendor invoice. """,
    tags=['invoice_management', 'payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_payments_1(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Returns all payments for the vendor invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/providers/invoices/{invoiceId}/payments',
    description=""" Creates a new payment on the vendor account and assigns the payment to the invoice. """,
    tags=['payment_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payment_1(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Creates a new payment on the vendor account and assigns the payment to the invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/providers/invoices/{invoiceId}/send',
    description=""" Sends a provider invoice. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send(invoice_id: int = Path(..., alias='invoiceId')):
    """
    Sends a provider invoice.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounting/providers/invoices/{invoiceId}/status',
    description=""" Changes invoice status to given status. """,
    tags=['invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def set_status(
    invoice_id: int = Path(..., alias='invoiceId'), body: StatusRequestDTO = ...
):
    """
    Changes invoice status to given status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounting/providers/payments/{paymentId}',
    description=""" Removes a provider payment. """,
    tags=['payment_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_7(payment_id: int = Path(..., alias='paymentId')):
    """
    Removes a provider payment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser',
    description=""" Searches for data (ie. customer, task, etc) and returns it in a tabular form. """,
    tags=['data_search_and_browsing', 'view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def browse_j_s_o_n(
    view_id: Optional[int] = Query(None, alias='viewId'),
    page: Optional[int] = 0,
    additional_order: Optional[str] = Query(None, alias='additionalOrder'),
    use_deferred_columns: Optional[str] = Query(None, alias='useDeferredColumns'),
    max_rows: Optional[int] = Query(0, alias='maxRows'),
):
    """
    Searches for data (ie. customer, task, etc) and returns it in a tabular form.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/csv',
    description=""" Searches for data (ie. customer, task, etc) and returns it in a CSV form. """,
    tags=['data_search_and_browsing', 'view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def browse_c_s_v(
    view_id: Optional[int] = Query(None, alias='viewId'),
    separator: Optional[str] = None,
    secondary_separator: Optional[str] = Query(None, alias='secondarySeparator'),
    additional_order: Optional[str] = Query(None, alias='additionalOrder'),
):
    """
    Searches for data (ie. customer, task, etc) and returns it in a CSV form.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/details/for/{className}',
    description=""" Returns current view's detailed information, suitable for browser. """,
    tags=['view_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_current_view_details(
    class_name: str = Path(..., alias='className'),
    place_name: Optional[str] = Query('default', alias='placeName'),
):
    """
    Returns current view's detailed information, suitable for browser.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/details/for/{className}/{viewId}',
    description=""" Returns view's detailed information, suitable for browser. """,
    tags=['view_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_view_details(
    class_name: str = Path(..., alias='className'),
    place_name: Optional[str] = Query('default', alias='placeName'),
    view_id: int = Path(..., alias='viewId'),
):
    """
    Returns view's detailed information, suitable for browser.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/browser/views/details/for/{className}/{viewId}',
    description=""" Selects given view as current and returns its detailed information, suitable for browser. """,
    tags=['view_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def select_view_and_get_its_details(
    class_name: str = Path(..., alias='className'),
    place_name__denotes_specific_place_in_system_with_the_table_: Optional[str] = Query(
        'default', alias='place name (denotes specific place in system with the table)'
    ),
    view_id: int = Path(..., alias='viewId'),
):
    """
    Selects given view as current and returns its detailed information, suitable for browser.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/for/{className}',
    description=""" Returns views' brief. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_views_brief(
    class_name: str = Path(..., alias='className'),
    place_name: Optional[str] = Query('default', alias='placeName'),
):
    """
    Returns views' brief.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/browser/views/for/{className}',
    description=""" Creates view for given class. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create(class_name: str = Path(..., alias='className')):
    """
    Creates view for given class.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/browser/views/{viewId}',
    description=""" Removes a view. No content is returned upon success (204). """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete(view_id: int = Path(..., alias='viewId')):
    """
    Removes a view.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}',
    description=""" Returns all view's information (ie. name, columns, filters, etc). """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get(view_id: int = Path(..., alias='viewId')):
    """
    Returns all view's information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}',
    description=""" Updates all view's information (ie. name, columns, filters, etc). """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update(view_id: int = Path(..., alias='viewId')):
    """
    Updates all view's information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/columns',
    description=""" Returns columns defined in view. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_columns(view_id: int = Path(..., alias='viewId')):
    """
    Returns columns defined in view.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/columns',
    description=""" Updates columns in view. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_columns(view_id: int = Path(..., alias='viewId')):
    """
    Updates columns in view.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/browser/views/{viewId}/columns/{columnName}',
    description=""" Deletes a single column from view. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_column(
    view_id: int = Path(..., alias='viewId'),
    column_name: str = Path(..., alias='columnName'),
):
    """
    Deletes a single column from view.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/columns/{columnName}/settings',
    description=""" Returns column's specific settings. For example when column describes money amount we can decide whether it should display currency or not. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_column_settings(
    view_id: int = Path(..., alias='viewId'),
    column_name: str = Path(..., alias='columnName'),
):
    """
    Returns column's specific settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/columns/{columnName}/settings',
    description=""" Updates column's specific settings. For example when column describes money amount we can decide whether it should display currency or not. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_column_settings(
    view_id: int = Path(..., alias='viewId'),
    column_name: str = Path(..., alias='columnName'),
    body: BrowserViewsViewIdColumnsColumnNameSettingsPutRequest = ...,
):
    """
    Updates column's specific settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/filter',
    description=""" Returns view's filter. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_filter(view_id: int = Path(..., alias='viewId')):
    """
    Returns view's filter.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/filter',
    description=""" Updates view's filter. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_filter(view_id: int = Path(..., alias='viewId')):
    """
    Updates view's filter.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/filter/{filterProperty}',
    description=""" Updates view's filter property. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_filter_property(
    view_id: int = Path(..., alias='viewId'),
    filter_property: str = Path(..., alias='filterProperty'),
    body: FilterPropertyDTO = ...,
):
    """
    Updates view's filter property.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/order',
    description=""" Returns view's order settings. """,
    tags=['view_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_order(view_id: int = Path(..., alias='viewId')):
    """
    Returns view's order settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/order',
    description=""" Updates view's order settings. """,
    tags=['view_management', 'column_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_order(view_id: int = Path(..., alias='viewId')):
    """
    Updates view's order settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/permissions',
    description=""" Returns view's permissions. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_permissions(view_id: int = Path(..., alias='viewId')):
    """
    Returns view's permissions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/permissions',
    description=""" Updates view's permissions. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_permissions(
    view_id: int = Path(..., alias='viewId'), body: PermissionsDTO = ...
):
    """
    Updates view's permissions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/settings',
    description=""" Returns view's settings (ie. name). """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_settings(view_id: int = Path(..., alias='viewId')):
    """
    Returns view's settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/settings',
    description=""" Updates view's settings. """,
    tags=['view_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_settings(view_id: int = Path(..., alias='viewId'), body: SettingsDTO = ...):
    """
    Updates view's settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/browser/views/{viewId}/settings/local',
    description=""" Returns view's local settings (for current user). """,
    tags=['view_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_local_settings(view_id: int = Path(..., alias='viewId')):
    """
    Returns view's local settings (for current user).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/browser/views/{viewId}/settings/local',
    description=""" Updates view's local settings (for current user). """,
    tags=['view_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_local_settings(
    view_id: int = Path(..., alias='viewId'), body: LocalSettingsDTO = ...
):
    """
    Updates view's local settings (for current user).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers',
    description=""" Returns list of simple clients representations """,
    tags=['client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_names_with_ids(
    updated_since: Optional[int] = Query(None, alias='updatedSince')
):
    """
    Returns list of simple clients representations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customers',
    description=""" Creates a new client. All available fields are presented in PUT request.<p>
  Required fields:
  <ul>
    <li>name</li>
    <li>fullName</li>
    <li>contact -> emails -> primary</li>
  </ul>
</p>
 """,
    tags=['client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_3(body: CustomerDTO):
    """
    Creates a new client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/ids',
    description=""" Returns clients' internal identifiers. """,
    tags=['client_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_2(
    updated_since: Optional[int] = Query(None, alias='updatedSince'),
    name_equals: Optional[str] = Query(None, alias='nameEquals'),
    email_equals: Optional[str] = Query(None, alias='emailEquals'),
):
    """
    Returns clients' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customers/persons',
    description=""" Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here. """,
    tags=['client_management', 'person_management', 'custom_field_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_2():
    """
    Creates a new person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customers/persons/accessToken',
    description=""" Generates a single use sign-in token for the customer person found for given login or e-mail. Returns 'url' and 'token' which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post 'token' provided as the 'accessToken' form param to the 'url' using POST method.Detailed description is available in the Customer API <a href="/api-doc/customer-api/authentication">authentication</a>. """,
    tags=['authentication_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def generate_single_use_sign_in_token():
    """
    Generates a single use sign-in token.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/persons/ids',
    description=""" Returns persons' internal identifiers. """,
    tags=['person_management', 'custom_field_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_1(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns persons' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customers/persons/{personId}',
    description=""" Removes a person. """,
    tags=['client_management', 'person_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_3(person_id: int = Path(..., alias='personId')):
    """
    Removes a person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/persons/{personId}',
    description=""" Returns person details. """,
    tags=['person_management', 'custom_field_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_1(person_id: int = Path(..., alias='personId')):
    """
    Returns person details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/persons/{personId}',
    description=""" Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them. """,
    tags=['person_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_1(person_id: int = Path(..., alias='personId')):
    """
    Updates an existing person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/persons/{personId}/contact',
    description=""" Returns contact of a given person. """,
    tags=['person_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contact(person_id: int = Path(..., alias='personId')):
    """
    Returns contact of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/persons/{personId}/contact',
    description=""" Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer). """,
    tags=['person_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contact(person_id: int = Path(..., alias='personId')):
    """
    Updates contact of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/persons/{personId}/customFields',
    description=""" Returns custom fields of a given person. """,
    tags=['person_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields(person_id: int = Path(..., alias='personId')):
    """
    Returns custom fields of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/persons/{personId}/customFields',
    description=""" Updates custom fields of a given person. """,
    tags=['person_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields(person_id: int = Path(..., alias='personId')):
    """
    Updates custom fields of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customers/priceLists/{priceListId}',
    description=""" Removes a customer price list. """,
    tags=['client_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_4(price_list_id: int = Path(..., alias='priceListId')):
    """
    Removes a customer price list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customers/{customerId}',
    description=""" Removes a client. """,
    tags=['client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_5(customer_id: int = Path(..., alias='customerId')):
    """
    Removes a client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}',
    description=""" Returns client details. """,
    tags=['client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_2(
    customer_id: int = Path(..., alias='customerId'), embed: Optional[str] = None
):
    """
    Returns client details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}',
    description=""" Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them. """,
    tags=['client_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_2(customer_id: int = Path(..., alias='customerId'), body: CustomerDTO = ...):
    """
    Updates an existing client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/address',
    description=""" Returns address of a given client. """,
    tags=['client_management', 'address_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_address(customer_id: int = Path(..., alias='customerId')):
    """
    Returns address of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/address',
    description=""" Updates address of a given client. """,
    tags=['client_management', 'address_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_address(
    customer_id: int = Path(..., alias='customerId'), body: AddressDTO = ...
):
    """
    Updates address of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/categories',
    description=""" Returns categories of a given client. """,
    tags=['client_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_categories(customer_id: int = Path(..., alias='customerId')):
    """
    Returns categories of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/categories',
    description=""" Updates categories of a given client. """,
    tags=['client_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_categories(
    customer_id: int = Path(..., alias='customerId'), body: CategoriesDTO = ...
):
    """
    Updates categories of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/contact',
    description=""" Returns contact of a given client. """,
    tags=['client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contact_1(customer_id: int = Path(..., alias='customerId')):
    """
    Returns contact of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/contact',
    description=""" Updates contact of a given client. """,
    tags=['client_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contact_1(
    customer_id: int = Path(..., alias='customerId'), body: ContactDTO = ...
):
    """
    Updates contact of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/correspondenceAddress',
    description=""" Returns correspondence address of a given client. """,
    tags=['client_management', 'address_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_correspondence_address(customer_id: int = Path(..., alias='customerId')):
    """
    Returns correspondence address of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/correspondenceAddress',
    description=""" Updates correspondence address of a given client. """,
    tags=['client_management', 'address_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_correspondence_address(
    customer_id: int = Path(..., alias='customerId'), body: AddressDTO = ...
):
    """
    Updates correspondence address of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/customFields',
    description=""" Returns custom fields of a given client. """,
    tags=['client_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_1(customer_id: int = Path(..., alias='customerId')):
    """
    Returns custom fields of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/customFields',
    description=""" Updates custom fields of a given client. """,
    tags=['client_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields_1(
    customer_id: int = Path(..., alias='customerId'), body: CustomFieldsDTO = ...
):
    """
    Updates custom fields of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/customFields/{customFieldKey}',
    description=""" Returns custom field of a given client. """,
    tags=['client_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_field(
    customer_id: int = Path(..., alias='customerId'),
    custom_field_key: str = Path(..., alias='customFieldKey'),
):
    """
    Returns custom field of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/customFields/{customFieldKey}',
    description=""" Updates given custom field of a given client. """,
    tags=['client_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_field(
    customer_id: int = Path(..., alias='customerId'),
    custom_field_key: str = Path(..., alias='customFieldKey'),
    body: CustomFieldDTO = ...,
):
    """
    Updates given custom field of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{customerId}/industries',
    description=""" Returns industries of a given client. """,
    tags=['client_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_industries(customer_id: int = Path(..., alias='customerId')):
    """
    Returns industries of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{customerId}/industries',
    description=""" Updates industries of a given client. """,
    tags=['client_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_industries(
    customer_id: int = Path(..., alias='customerId'), body: CategoriesDTO = ...
):
    """
    Updates industries of a given client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/active',
    description=""" Returns active dictionary entities for all types. """,
    tags=['dictionary_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_active():
    """
    Returns active dictionary entities for all types.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/all',
    description=""" <div>
  <p>
    XTRF holds many user-defined dictionaries (ie. countries).
    Each dictionary contains a set of values (ie. Poland or Germany).
    A default value may be defined for a dictionary.
  </p>
  <p>
    Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.
    Please note that name used in dictionary values is presented in the locale of the current identity.
    The same dictionary value can have different names, ie. "Poland" for one user, "Polska" for another one.
  </p>
  <p>
    Possible dictionary types with short explanation:
    <ul>
      <li>calculationUnit - predefined values of how to calculate the volume of work into the price</li>
      <li>category - labels to organize data on the platform</li>
      <li>country - list of countries used on the platform</li>
      <li>currency - currencies used in financial operations in the system</li>
      <li>industry - industry sectors which clients specialize in</li>
      <li>jobType - services offered by a company used in customized workflows</li>
      <li>language - list of languages and its values used on the platform</li>
      <li>leadSource - lead/recruitment places where new clients and vendors may be found</li>
      <li>personDepartment - departments in which contact person may be assigned to</li>
      <li>personPosition - positions in which user may be associated with</li>
      <li>province - states and provinces used in various documents on the platform</li>
      <li>specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military</li>
    </ul>
  </p>
</div> """,
    tags=['dictionary_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_1():
    """
    Returns dictionary entities for all types. Both active and not active ones.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/currency/{isoCode}/exchangeRate',
    description=""" Returns currency exchange rates. """,
    tags=['currency_exchange_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_iso_code(iso_code: str = Path(..., alias='isoCode')):
    """
    Returns currency exchange rates.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dictionaries/currency/{isoCode}/exchangeRate',
    description=""" Adding currency exchange rates via API """,
    tags=['currency_exchange_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_exchange_rate(
    iso_code: str = Path(..., alias='isoCode'), body: CurrencyHistoryDTO = ...
):
    """
    Adding currency exchange rates.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/{type}/active',
    description=""" Returns active values from a given dictionary. """,
    tags=['dictionary_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_active_by_type(
    type: str, name_equals: Optional[str] = Query(None, alias='nameEquals')
):
    """
    Returns active values from a given dictionary.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/{type}/all',
    description=""" Returns all values (both active and not active) from a given dictionary. """,
    tags=['dictionary_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_by_type(
    type: str, name_equals: Optional[str] = Query(None, alias='nameEquals')
):
    """
    Returns all values (both active and not active) from a given dictionary.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dictionaries/{type}/{id}',
    description=""" Returns specific value from a given dictionary. """,
    tags=['dictionary_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_type_and_id(type: str, id: int = ...):
    """
    Returns specific value from a given dictionary.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files',
    description=""" When a file is required by an operation (ie. task creation) it must be uploaded previously to the API.
Uploading a file will result in a file token, which can be used to reference this file in other API calls.
 Each file must be uploaded separately.
 Keep in mind that file token has limited validity (ie. 10 minutes).
 Therefore files must be uploaded just before issuing API call which reference them.
 """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def upload_file(file: UploadFile):
    """
    Uploads a temporary file (ie. for XML import). Returns token which can be used in other API calls.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs/{jobId}',
    description=""" Returns job details by jobId. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_job_details(job_id: str = Path(..., alias='jobId')):
    """
    Returns job details by jobId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{jobId}/dates',
    description=""" Updates dates of a given job. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_dates(job_id: str = Path(..., alias='jobId'), body: JobDatesDto = ...):
    """
    Updates dates of a given job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs/{jobId}/files',
    description=""" Returns list of input and output files of a job. """,
    tags=['file_operations', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_job_files(job_id: str = Path(..., alias='jobId')):
    """
    Returns list of input and output files of a job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/jobs/{jobId}/files/output',
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def assign_file_to_job_output(job_id: str = Path(..., alias='jobId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs/{jobId}/files/{fileId}',
    description=""" Returns file metadata. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_job_files_1(
    job_id: str = Path(..., alias='jobId'), file_id: int = Path(..., alias='fileId')
):
    """
    Returns file metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{jobId}/instructions',
    description=""" Updates instructions for a job. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_instructions(
    job_id: str = Path(..., alias='jobId'), body: InstructionsDTO = ...
):
    """
    Updates instructions for a job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{jobId}/status',
    description=""" Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul> """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_status(job_id: str = Path(..., alias='jobId'), body: JobStatusDTO = ...):
    """
    Changes job status if possible (400 Bad Request is returned otherwise).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{jobId}/vendor',
    description=""" Assigns vendor to a job in a project. """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def assign_vendor(job_id: str = Path(..., alias='jobId'), body: AssignVendorDTO = ...):
    """
    Assigns vendor to a job in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/license',
    description=""" Returns license content. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_license():
    """
    Returns license content.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/license/refresh',
    description=""" Refreshes license content. This method returns OK immediately and license is refreshed asynchronously. It takes a while (usually a few seconds) for the license to be actually refreshed. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def refresh():
    """
    Refreshes license content.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/macros/{macroId}/run',
    description=""" Runs a specified macro on a specified list of items ("list" variable in the macro code). The list of items can be empty if the macro doesn't use it. Additional custom parameters can be provided to the macro when necessary ("params" variable in the macro code).

 <BR>Note: Macros that support parameters can be also run from GUI (Views in Home Portal),so they should also handle the empty parameters map (e.g. by defining default values when parameters are not provided). """,
    tags=['custom_field_management', 'task_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def run(macro_id: int = Path(..., alias='macroId')):
    """
    Executes a macro.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects',
    description=""" Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_5():
    """
    Creates a new Classic Project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/files/{fileId}/download',
    description=""" Downloads a file. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_by_id(file_id: str = Path(..., alias='fileId')):
    """
    Downloads a file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/ids',
    description=""" Returns projects' internal identifiers. """,
    tags=['project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_6(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns projects' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectId}',
    description=""" Removes a project. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_12(project_id: str = Path(..., alias='projectId')):
    """
    Removes a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}',
    description=""" Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead. """,
    tags=['project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_7(
    project_id: str = Path(..., alias='projectId'), embed: Optional[str] = None
):
    """
    Returns project details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}/contacts',
    description=""" Returns contacts of a given project. """,
    tags=['project_management', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contacts(project_id: str = Path(..., alias='projectId')):
    """
    Returns contacts of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/contacts',
    description=""" Updates contacts of a given project. """,
    tags=['contact_management', 'project_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contacts(
    project_id: str = Path(..., alias='projectId'), body: ContactsDTO = ...
):
    """
    Updates contacts of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}/customFields',
    description=""" Returns custom fields of a given project. """,
    tags=['custom_field_management', 'custom_field_handling', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_5(project_id: str = Path(..., alias='projectId')):
    """
    Returns custom fields of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/customFields',
    description=""" Updates custom fields of a given project. """,
    tags=['custom_field_management', 'custom_field_handling', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields_3(
    project_id: str = Path(..., alias='projectId'), body: CustomFieldsDTO = ...
):
    """
    Updates custom fields of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}/dates',
    description=""" Returns dates of a given project. """,
    tags=['project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_dates_1(project_id: str = Path(..., alias='projectId')):
    """
    Returns dates of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/dates',
    description=""" Updates dates of a given project. """,
    tags=['project_management', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_dates_1(
    project_id: str = Path(..., alias='projectId'), body: ProjectDatesDTO = ...
):
    """
    Updates dates of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}/finance',
    description=""" Returns finance of a given project. """,
    tags=['financial_management', 'finance_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_finance(project_id: str = Path(..., alias='projectId')):
    """
    Returns finance of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{projectId}/finance/payables',
    description=""" Adds a payable to a project. """,
    tags=['financial_management', 'payable_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payable(
    project_id: str = Path(..., alias='projectId'), body: PayableCreateDTO = ...
):
    """
    Adds a payable to a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectId}/finance/payables/{payableId}',
    description=""" Deletes a payable. """,
    tags=['payable_management', 'financial_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_payable(
    project_id: str = Path(..., alias='projectId'),
    payable_id: int = Path(..., alias='payableId'),
):
    """
    Deletes a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/finance/payables/{payableId}',
    description=""" Updates a payable. """,
    tags=['payable_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_payable(
    project_id: str = Path(..., alias='projectId'),
    payable_id: int = Path(..., alias='payableId'),
    body: PayableDTO = ...,
):
    """
    Updates a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{projectId}/finance/receivables',
    description=""" Adds a receivable to a project. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_receivable(
    project_id: str = Path(..., alias='projectId'), body: ReceivableCreateDTO = ...
):
    """
    Adds a receivable to a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectId}/finance/receivables/{receivableId}',
    description=""" Deletes a receivable. """,
    tags=['financial_management', 'receivable_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_receivable(
    project_id: str = Path(..., alias='projectId'),
    receivable_id: int = Path(..., alias='receivableId'),
):
    """
    Deletes a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/finance/receivables/{receivableId}',
    description=""" Updates a receivable. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_receivable(
    project_id: str = Path(..., alias='projectId'),
    receivable_id: int = Path(..., alias='receivableId'),
    body: ReceivableDTO = ...,
):
    """
    Updates a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectId}/instructions',
    description=""" Returns instructions of a given project. """,
    tags=['project_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_instructions(project_id: str = Path(..., alias='projectId')):
    """
    Returns instructions of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectId}/instructions',
    description=""" Updates instructions of a given project. """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_instructions_1(
    project_id: str = Path(..., alias='projectId'), body: InstructionsDTO = ...
):
    """
    Updates instructions of a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{projectId}/languageCombinations',
    description=""" Creates a new language combination for a given project without creating a task. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_language_combination(
    project_id: str = Path(..., alias='projectId'),
    body: CommonLanguageCombinationDTO = ...,
):
    """
    Creates a new language combination for a given project without creating a task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{projectId}/tasks',
    description=""" Creates a new task for a given project.<p>
  Required fields:
  <ul>
    <li>languageCombination</li>
    <li>specializationId</li>
    <li>workflowId</li>
  </ul>
</p>
 """,
    tags=['task_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_task(
    project_id: str = Path(..., alias='projectId'), body: TaskCreateDTO = ...
):
    """
    Creates a new task for a given project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/ids',
    description=""" Returns providers' internal identifiers. """,
    tags=['provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_5(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns providers' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/persons/ids',
    description=""" Returns persons' internal identifiers. """,
    tags=['person_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_4(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns persons' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/persons/{personId}',
    description=""" Removes a person. """,
    tags=['client_management', 'person_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_8(person_id: int = Path(..., alias='personId')):
    """
    Removes a person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/persons/{personId}',
    description=""" Returns person details. """,
    tags=['person_management', 'client_management', 'custom_field_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_4(person_id: int = Path(..., alias='personId')):
    """
    Returns person details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/persons/{personId}/contact',
    description=""" Returns contact of a given person. """,
    tags=['person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contact_2(person_id: int = Path(..., alias='personId')):
    """
    Returns contact of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/persons/{personId}/customFields',
    description=""" Returns custom fields of a given person. """,
    tags=['custom_field_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_2(person_id: int = Path(..., alias='personId')):
    """
    Returns custom fields of a given person.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/persons/{personId}/notification/invitation',
    description=""" Sends invitation to Vendor Portal. """,
    tags=['person_management', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send_invitations(person_id: int = Path(..., alias='personId')):
    """
    Sends invitation to Vendor Portal.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/priceLists/{priceListId}',
    description=""" Removes a provider price list. """,
    tags=['provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_9(price_list_id: int = Path(..., alias='priceListId')):
    """
    Removes a provider price list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/{providerId}',
    description=""" Removes a provider. """,
    tags=['provider_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_10(provider_id: int = Path(..., alias='providerId')):
    """
    Removes a provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}',
    description=""" Returns provider details. """,
    tags=['provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_5(
    provider_id: int = Path(..., alias='providerId'), embed: Optional[str] = None
):
    """
    Returns provider details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/address',
    description=""" Returns address of a given provider. """,
    tags=['provider_management', 'address_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_address_1(provider_id: int = Path(..., alias='providerId')):
    """
    Returns address of a given provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/competencies',
    description=""" Returns competencies of a given provider. """,
    tags=['provider_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_competencies(provider_id: int = Path(..., alias='providerId')):
    """
    Returns competencies of a given provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/contact',
    description=""" Returns contact of a given provider. """,
    tags=['provider_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contact_3(provider_id: int = Path(..., alias='providerId')):
    """
    Returns contact of a given provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/correspondenceAddress',
    description=""" Returns correspondence address of a given provider. """,
    tags=['address_management', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_correspondence_address_1(provider_id: int = Path(..., alias='providerId')):
    """
    Returns correspondence address of a given provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/customFields',
    description=""" Returns custom fields of a given provider. """,
    tags=['custom_field_management', 'custom_field_handling', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_3(provider_id: int = Path(..., alias='providerId')):
    """
    Returns custom fields of a given provider.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/{providerId}/notification/invitation',
    description=""" Sends invitations to Vendor Portal. """,
    tags=['provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send_invitations_1(provider_id: int = Path(..., alias='providerId')):
    """
    Sends invitations to Vendor Portal.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/ids',
    description=""" Returns quotes' internal identifiers. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_ids_7(updated_since: Optional[int] = Query(None, alias='updatedSince')):
    """
    Returns quotes' internal identifiers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quotes/{quoteId}',
    description=""" Removes a quote. """,
    tags=['quote_management', 'quote_updates_management', 'quote_status_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_13(quote_id: str = Path(..., alias='quoteId')):
    """
    Removes a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/{quoteId}',
    description=""" Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead. """,
    tags=[
        'quote_management',
        'quote_updates_management',
        'quote_status_management',
        'quote_notes_management',
    ],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_8(
    quote_id: str = Path(..., alias='quoteId'), embed: Optional[str] = None
):
    """
    Returns quote details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/confirmation/send',
    description=""" Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer. """,
    tags=['quote_management', 'quote_status_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def send_1(quote_id: str = Path(..., alias='quoteId')):
    """
    Sends a quote for customer confirmation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/{quoteId}/customFields',
    description=""" Returns custom fields of a given quote. """,
    tags=['quote_management', 'custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_6(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns custom fields of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quotes/{quoteId}/customFields',
    description=""" Updates custom fields of a given quote. """,
    tags=['custom_field_management', 'quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields_4(
    quote_id: str = Path(..., alias='quoteId'), body: CustomFieldsDTO = ...
):
    """
    Updates custom fields of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/{quoteId}/dates',
    description=""" Returns dates of a given quote. """,
    tags=['quote_management', 'quote_date_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_dates_2(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns dates of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/{quoteId}/finance',
    description=""" Returns finance of a given quote. """,
    tags=['finance_management', 'quote_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_finance_1(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns finance of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/finance/payables',
    description=""" Adds a payable. """,
    tags=['payable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payable_1(
    quote_id: str = Path(..., alias='quoteId'), body: PayableCreateDTO = ...
):
    """
    Adds a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quotes/{quoteId}/finance/payables/{payableId}',
    description=""" Deletes a payable. """,
    tags=['payable_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_payable_1(
    quote_id: str = Path(..., alias='quoteId'),
    payable_id: int = Path(..., alias='payableId'),
):
    """
    Deletes a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quotes/{quoteId}/finance/payables/{payableId}',
    description=""" Updates a payable. """,
    tags=['payable_management', 'quote_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_payable_1(
    quote_id: str = Path(..., alias='quoteId'),
    payable_id: int = Path(..., alias='payableId'),
    body: PayableDTO = ...,
):
    """
    Updates a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/finance/receivables',
    description=""" Adds a receivable. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_receivable_1(
    quote_id: str = Path(..., alias='quoteId'), body: ReceivableCreateDTO = ...
):
    """
    Adds a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quotes/{quoteId}/finance/receivables/{receivableId}',
    description=""" Deletes a receivable. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_receivable_1(
    quote_id: str = Path(..., alias='quoteId'),
    receivable_id: int = Path(..., alias='receivableId'),
):
    """
    Deletes a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quotes/{quoteId}/finance/receivables/{receivableId}',
    description=""" Updates a receivable. """,
    tags=['receivable_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_receivable_1(
    quote_id: str = Path(..., alias='quoteId'),
    receivable_id: int = Path(..., alias='receivableId'),
    body: ReceivableDTO = ...,
):
    """
    Updates a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quotes/{quoteId}/instructions',
    description=""" Returns instructions of a given quote. """,
    tags=['quote_instruction_management', 'quote_management', 'quote_notes_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_instructions_1(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns instructions of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quotes/{quoteId}/instructions',
    description=""" Updates instructions of a given quote. """,
    tags=[
        'quote_instruction_management',
        'quote_updates_management',
        'quote_notes_management',
    ],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_instructions_2(
    quote_id: str = Path(..., alias='quoteId'), body: InstructionsDTO = ...
):
    """
    Updates instructions of a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/languageCombinations',
    description=""" Creates a new language combination for a given quote without creating a task. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_language_combination_1(
    quote_id: str = Path(..., alias='quoteId'), body: CommonLanguageCombinationDTO = ...
):
    """
    Creates a new language combination for a given quote without creating a task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/start',
    description=""" Starts a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def start(quote_id: str = Path(..., alias='quoteId')):
    """
    Starts a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quotes/{quoteId}/tasks',
    description=""" Creates a new task for a given quote. Required fields are presented in the example. """,
    tags=['quote_management', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_task_1(quote_id: str = Path(..., alias='quoteId'), body: TaskDTO = ...):
    """
    Creates a new task for a given quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/export/xml',
    description=""" Exports reports definition to XML. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def export_to_x_m_l():
    """
    Exports reports definition to XML.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/import/xml',
    description=""" Imports a report definition from an XML using a file token. To obtain the token, you first need to upload a temporary XML file, as specified in the Files section. Note that the name of the imported report must be unique. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def import_from_x_m_l():
    """
    Imports reports definition from XML.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/reports/{reportId}',
    description=""" Removes a report. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_11(report_id: int = Path(..., alias='reportId')):
    """
    Removes a report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/{reportId}/duplicate',
    description=""" Duplicates a report. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def duplicate_1(report_id: int = Path(..., alias='reportId')):
    """
    Duplicates a report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/reports/{reportId}/preferred',
    description=""" Marks report as preferred or not. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def set_preferred(report_id: int = Path(..., alias='reportId')):
    """
    Marks report as preferred or not.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/{reportId}/result/csv',
    description=""" Generates CSV content for a report. """,
    tags=['data_search_and_browsing', 'report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def generate_c_s_v(report_id: int = Path(..., alias='reportId')):
    """
    Generates CSV content for a report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/{reportId}/result/printerFriendly',
    description=""" Generates printer friendly content for a report. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def generate_printer_friendly(report_id: int = Path(..., alias='reportId')):
    """
    Generates printer friendly content for a report.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/active',
    description=""" Returns active workflows list """,
    tags=['service_retrieval'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_active(name_equals: Optional[str] = Query(None, alias='nameEquals')):
    """
    Returns active services list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/all',
    description=""" Returns workflows list. Both active and not active ones. """,
    tags=['service_retrieval', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_3(name_equals: Optional[str] = Query(None, alias='nameEquals')):
    """
    Returns services list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscription',
    description=""" Returns all subscriptions. Subscriptions are automatically removed if they do not work (ie. if 404 status is returned). To improve notification reliability one can use this method to check if subscription is still active and re-subscribe if necessary. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_4():
    """
    Returns all subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscription',
    description=""" Subscribe to event. Returns subscription Id. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def subscribe():
    """
    Subscribe to event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscription/supports',
    description=""" This method can be used to determine if hooks are supported. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def are_hooks_supported():
    """
    This method can be used to determine if hooks are supported.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/subscription/{subscriptionId}',
    description=""" Unsubscribe from job status changed event """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def unsubscribe(subscription_id: str = Path(..., alias='subscriptionId')):
    """
    Unsubscribe from event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tasks/{taskId}',
    description=""" Removes a task. """,
    tags=['task_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_14(
    task_id: str = Path(..., alias='taskId'),
    remove_files_from_disc: Optional[bool] = Query(None, alias='removeFilesFromDisc'),
    remove_external_projects: Optional[bool] = Query(
        None, alias='removeExternalProjects'
    ),
    force_jobs_removal: Optional[bool] = Query(None, alias='forceJobsRemoval'),
):
    """
    Removes a task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/clientTaskPONumber',
    description=""" Updates Client Task PO Number of a given task. """,
    tags=['task_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_task_p_o_number(
    task_id: str = Path(..., alias='taskId'), body: StringDTO = ...
):
    """
    Updates Client Task PO Number of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/contacts',
    description=""" Returns contacts of a given task. """,
    tags=['task_management', 'task_contact_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contacts_1(task_id: str = Path(..., alias='taskId')):
    """
    Returns contacts of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/contacts',
    description=""" Updates contacts of a given task. """,
    tags=['task_contact_management', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contacts_1(
    task_id: str = Path(..., alias='taskId'), body: ContactsDTO = ...
):
    """
    Updates contacts of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/customFields',
    description=""" Returns custom fields of a given task. """,
    tags=['custom_field_management', 'custom_field_handling', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_7(task_id: str = Path(..., alias='taskId')):
    """
    Returns custom fields of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/customFields',
    description=""" Updates custom fields of a given task. """,
    tags=['custom_field_management', 'custom_field_handling', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields_5(
    task_id: str = Path(..., alias='taskId'), body: CustomFieldsDTO = ...
):
    """
    Updates custom fields of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/dates',
    description=""" Returns dates of a given task. """,
    tags=['task_management', 'task_date_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_dates_3(task_id: str = Path(..., alias='taskId')):
    """
    Returns dates of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/dates',
    description=""" Updates dates of a given task. """,
    tags=['task_management', 'task_date_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_dates_2(
    task_id: str = Path(..., alias='taskId'), body: ProjectDatesDTO = ...
):
    """
    Updates dates of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/files',
    description=""" Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files. """,
    tags=['file_operations', 'task_management', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_task_files(task_id: str = Path(..., alias='taskId')):
    """
    Returns lists of files of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tasks/{taskId}/files/input',
    description=""" Adds files to a given task. """,
    tags=['file_operations', 'task_management', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_file(task_id: str = Path(..., alias='taskId'), body: FileDTO = ...):
    """
    Adds files to a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/instructions',
    description=""" Returns instructions of a given task. """,
    tags=['task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_instructions_2(task_id: str = Path(..., alias='taskId')):
    """
    Returns instructions of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/instructions',
    description=""" Updates instructions of a given task. """,
    tags=['task_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_instructions_3(
    task_id: str = Path(..., alias='taskId'), body: InstructionsDTO = ...
):
    """
    Updates instructions of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}/name',
    description=""" Updates name of a given task. """,
    tags=['task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_name(task_id: str = Path(..., alias='taskId'), body: StringDTO = ...):
    """
    Updates name of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}/progress',
    description=""" Returns progress of a given task. Progress contains information about task's status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included. """,
    tags=['task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_progress(task_id: str = Path(..., alias='taskId')):
    """
    Returns progress of a given task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tasks/{taskId}/start',
    description=""" Starts a task. """,
    tags=['task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def start_1(task_id: str = Path(..., alias='taskId')):
    """
    Starts a task.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Returns list of simple users representations """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_all_names_with_ids_1():
    """
    Returns list of simple users representations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/me',
    description=""" Returns currently signed in user details. """,
    tags=['user_management', 'authentication_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_me():
    """
    Returns currently signed in user details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/me/timeZone',
    description=""" Returns time zone preferred by user currently signed in. """,
    tags=['user_management', 'authentication_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_time_zone():
    """
    Returns time zone preferred by user currently signed in.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}',
    description=""" Returns user details. """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_6(user_id: int = Path(..., alias='userId')):
    """
    Returns user details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}',
    description=""" Updates an existing user. """,
    tags=['user_management', 'person_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_3(user_id: int = Path(..., alias='userId'), body: UserDTO = ...):
    """
    Updates an existing user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/customFields',
    description=""" Returns custom fields of a given user. """,
    tags=['custom_field_management', 'custom_field_handling', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_4(user_id: int = Path(..., alias='userId')):
    """
    Returns custom fields of a given user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}/customFields',
    description=""" Updates custom fields of a given user. """,
    tags=['custom_field_management', 'custom_field_handling', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_fields_2(
    user_id: int = Path(..., alias='userId'), body: CustomFieldsDTO = ...
):
    """
    Updates custom fields of a given user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/customFields/{customFieldKey}',
    description=""" Returns custom field of a given user. """,
    tags=['custom_field_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_field_1(
    user_id: int = Path(..., alias='userId'),
    custom_field_key: str = Path(..., alias='customFieldKey'),
):
    """
    Returns custom field of a given user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}/customFields/{customFieldKey}',
    description=""" Updates given custom field of a given user. """,
    tags=['custom_field_management', 'custom_field_handling', 'user_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_field_1(
    user_id: int = Path(..., alias='userId'),
    custom_field_key: str = Path(..., alias='customFieldKey'),
    body: CustomFieldDTO = ...,
):
    """
    Updates given custom field of a given user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}/password',
    description=""" Sets user's password to a new value. """,
    tags=['user_management', 'authentication_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_password(user_id: int = Path(..., alias='userId'), request: Request = ...):
    """
    Sets user's password to a new value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/jobs/for-external-id',
    tags=['data_search_and_browsing', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_external_id(
    external_project_id: Optional[str] = Query(None, alias='externalProjectId'),
    external_id: Optional[str] = Query(None, alias='externalId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/jobs/{jobId}',
    description=""" Returns details for a job. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_by_id_1(job_id: str = Path(..., alias='jobId')):
    """
    Returns details for a job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/dates',
    description=""" Updates dates of a given job. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_dates(job_id: str = Path(..., alias='jobId'), body: JobDatesDto = ...):
    """
    Updates dates of a given job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/jobs/{jobId}/files/addExternalLink',
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_external_file_link(
    job_id: str = Path(..., alias='jobId'), body: ExternalFileDto = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/jobs/{jobId}/files/delivered',
    description=""" Returns list of files delivered in the job. """,
    tags=['job_management', 'file_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_delivered_files(job_id: str = Path(..., alias='jobId')):
    """
    Returns list of files delivered in the job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/files/delivered/add',
    description=""" Adds files to the project as delivered in the job. The files have to be uploaded beforehand (see "POST /jobs/{jobId}/files/upload" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul> """,
    tags=['job_management', 'file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_files(
    job_id: str = Path(..., alias='jobId'), body: FileCategorizationsDto = ...
):
    """
    Adds files to the project as delivered in the job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/jobs/{jobId}/files/delivered/addLink',
    description=""" Adds file link to the project as a link delivered in the job. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul> """,
    tags=['job_management', 'file_operations', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_file_links(
    job_id: str = Path(..., alias='jobId'), body: FileLinkCategorizationsDto = ...
):
    """
    Adds file link to the project as a link delivered in the job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/jobs/{jobId}/files/delivered/upload',
    description=""" Uploads file to the project as a file delivered in the job. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see "PUT /jobs/{jobId}/files/add" operation). """,
    tags=['file_operations', 'file_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def upload_file_1(job_id: str = Path(..., alias='jobId'), file: UploadFile = ...):
    """
    Uploads file to the project as a file delivered in the job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/jobs/{jobId}/files/sharedReferenceFiles',
    description=""" Returns list of files shared with the job as Reference Files. """,
    tags=['job_management', 'file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_shared_reference_files(job_id: str = Path(..., alias='jobId')):
    """
    Returns list of files shared with the job as Reference Files.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/files/sharedReferenceFiles/share',
    description=""" Shares selected files as Reference Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Work File, it will now be shared as Reference File (and not as Work File). """,
    tags=['job_management', 'file_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def share_as_reference_files(job_id: str = Path(..., alias='jobId')):
    """
    Shares selected files as Reference Files with a job in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/jobs/{jobId}/files/sharedWorkFiles',
    description=""" Returns list of files shared with the job as Work Files. """,
    tags=['job_management', 'file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_shared_work_files(job_id: str = Path(..., alias='jobId')):
    """
    Returns list of files shared with the job as Work Files.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/files/sharedWorkFiles/share',
    description=""" Shares selected files as Work Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Reference File, it will now be shared as Work File (and not as Reference File). """,
    tags=['job_management', 'file_operations', 'file_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def share_as_work_files(job_id: str = Path(..., alias='jobId')):
    """
    Shares selected files as Work Files with a job in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/files/stopSharing',
    description=""" Stops sharing selected files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were not shared with the job. """,
    tags=['job_management', 'file_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def stop_sharing(job_id: str = Path(..., alias='jobId')):
    """
    Stops sharing selected files with a job in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/instructions',
    description=""" Updates instructions for a job. See also "PUT /projects/{projectId}/vendorInstructions" and "PUT /quotes/{quoteId}/vendorInstructions" for updating instructions for all jobs in a project or quote. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_instructions_4(
    job_id: str = Path(..., alias='jobId'), body: StringDTO = ...
):
    """
    Updates instructions for a job.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/status',
    description=""" Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul> """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_status_1(job_id: str = Path(..., alias='jobId'), body: JobStatusDTO = ...):
    """
    Changes job status if possible (400 Bad Request is returned otherwise).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/jobs/{jobId}/vendor',
    description=""" Assigns vendor to a job in a project. """,
    tags=['job_management', 'project_management', 'provider_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def assign_vendor_1(
    job_id: str = Path(..., alias='jobId'), body: VendorPriceProfileDTO = ...
):
    """
    Assigns vendor to a job in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects',
    description=""" Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_6(body: ProjectCreateDTO = None):
    """
    Creates a new Smart Project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/files/archive',
    description=""" Prepares a ZIP archive that contains the specified files. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def archive(body: FilesDto):
    """
    Prepares a ZIP archive that contains the specified files.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/files/{fileId}',
    description=""" Returns details of a file. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_by_id_2(file_id: str = Path(..., alias='fileId')):
    """
    Returns details of a file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/files/{fileId}/download/{fileName}',
    description=""" Downloads a file content. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_content_by_id(
    file_id: str = Path(..., alias='fileId'),
    file_name: str = Path(..., alias='fileName'),
):
    """
    Downloads a file content.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/for-external-id/{externalProjectId}',
    description=""" Returns project details. """,
    tags=['project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_external_id_1(
    external_project_id: str = Path(..., alias='externalProjectId')
):
    """
    Returns project details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}',
    description=""" Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead. """,
    tags=['project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_9(project_id: str = Path(..., alias='projectId')):
    """
    Returns project details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/addJob',
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_job_to_process(project_id: str = Path(..., alias='projectId')):
    """
    Returns process id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/catToolProject',
    tags=['project_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_c_a_t_tool_project_info(project_id: str = Path(..., alias='projectId')):
    """
    Returns if cat tool project is created or queued.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/clientContacts',
    description=""" Returns Client Contacts information for a project """,
    tags=['client_management', 'project_management', 'data_search_and_browsing'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contacts_2(project_id: str = Path(..., alias='projectId')):
    """
    Returns Client Contacts information for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/clientContacts',
    description=""" Updates Client Contacts for a project. """,
    tags=['client_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contacts_2(
    project_id: str = Path(..., alias='projectId'), body: SmartContactsDTO = ...
):
    """
    Updates Client Contacts for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/clientDeadline',
    description=""" Updates Client Deadline for a project. """,
    tags=['project_management', 'task_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_deadline(
    project_id: str = Path(..., alias='projectId'), body: TimeDTO = ...
):
    """
    Updates Client Deadline for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/clientNotes',
    description=""" Updates Client Notes for a project. """,
    tags=['project_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_notes(
    project_id: str = Path(..., alias='projectId'), body: StringDTO = ...
):
    """
    Updates Client Notes for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/clientReferenceNumber',
    description=""" Updates Client Reference Number for a project. """,
    tags=['project_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_reference_number(
    project_id: str = Path(..., alias='projectId'), body: StringDTO = ...
):
    """
    Updates Client Reference Number for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/customFields',
    description=""" Returns a list of custom field keys and values for a project. """,
    tags=['custom_field_management', 'custom_field_handling', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_8(project_id: str = Path(..., alias='projectId')):
    """
    Returns a list of custom field keys and values for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/customFields/{key}',
    description=""" Updates a custom field with a specified key in a project """,
    tags=['custom_field_management', 'project_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_field_2(
    project_id: str = Path(..., alias='projectId'),
    key: str = ...,
    body: SmartCustomFieldDTO = ...,
):
    """
    Updates a custom field with a specified key in a project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/files',
    description=""" Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_files(project_id: str = Path(..., alias='projectId')):
    """
    Returns list of files in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/files/add',
    description=""" Adds files to the project as added by PM. The files have to be uploaded beforehand (see "POST /v2/projects/{projectId}/files/upload" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul> """,
    tags=['project_management', 'file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_files_1(
    project_id: str = Path(..., alias='projectId'), body: FileCategorizationsDto = ...
):
    """
    Adds files to the project as added by PM.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/files/addExternalLink',
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_external_file_links(
    project_id: str = Path(..., alias='projectId'), body: ExternalFileDto = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/files/addLink',
    description=""" Adds file links to the project as added by PM. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul> """,
    tags=['project_management', 'file_operations'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_file_links_1(
    project_id: str = Path(..., alias='projectId'),
    body: FileLinkCategorizationsDto = ...,
):
    """
    Adds file links to the project as added by PM.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/files/deliverable',
    description=""" Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:<ul><li>the file was added to a job in the last step in the process</li><li>the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)</li><li>the job is finished (has Ready status)</li></ul> """,
    tags=['file_operations', 'project_management', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_deliverable_files(project_id: str = Path(..., alias='projectId')):
    """
    Returns list of files in a project, that are ready to be delivered to client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/files/upload',
    description=""" Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see "PUT /v2/projects/{projectId}/files/add" operation """,
    tags=['file_operations', 'file_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def upload_file_2(
    project_id: str = Path(..., alias='projectId'), file: UploadFile = ...
):
    """
    Uploads file to the project as a file uploaded by PM.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/finance',
    description=""" Returns finance information for a project. """,
    tags=['financial_management', 'finance_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_finance_2(project_id: str = Path(..., alias='projectId')):
    """
    Returns finance information for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/finance/payables',
    description=""" Adds a payable to a project. """,
    tags=['payable_management', 'financial_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payable_2(
    project_id: str = Path(..., alias='projectId'), body: PayableCreateDTO = ...
):
    """
    Adds a payable to a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/projects/{projectId}/finance/payables/{payableId}',
    description=""" Deletes a payable. """,
    tags=['payable_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_payable_2(
    project_id: str = Path(..., alias='projectId'),
    payable_id: int = Path(..., alias='payableId'),
):
    """
    Deletes a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/finance/payables/{payableId}',
    description=""" Updates a payable. """,
    tags=['payable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_payable_2(
    project_id: str = Path(..., alias='projectId'),
    payable_id: int = Path(..., alias='payableId'),
    body: PayableDTO = ...,
):
    """
    Updates a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/projects/{projectId}/finance/receivables',
    description=""" Adds a receivable to a project. """,
    tags=['financial_management', 'receivable_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_receivable_2(
    project_id: str = Path(..., alias='projectId'), body: ReceivableCreateDTO = ...
):
    """
    Adds a receivable to a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/projects/{projectId}/finance/receivables/{receivableId}',
    description=""" Deletes a receivable. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_receivable_2(
    project_id: str = Path(..., alias='projectId'),
    receivable_id: int = Path(..., alias='receivableId'),
):
    """
    Deletes a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/finance/receivables/{receivableId}',
    description=""" Updates a receivable. """,
    tags=['receivable_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_receivable_2(
    project_id: str = Path(..., alias='projectId'),
    receivable_id: int = Path(..., alias='receivableId'),
    body: ReceivableDTO = ...,
):
    """
    Updates a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/internalNotes',
    description=""" Updates Internal Notes for a project. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_internal_notes(
    project_id: str = Path(..., alias='projectId'), body: StringDTO = ...
):
    """
    Updates Internal Notes for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/jobs',
    description=""" Returns list of jobs in a project. """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_jobs(project_id: str = Path(..., alias='projectId')):
    """
    Returns list of jobs in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/orderDate',
    description=""" Updates Order Date for a project. """,
    tags=['project_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_ordered_on(
    project_id: str = Path(..., alias='projectId'), body: TimeDTO = ...
):
    """
    Updates Order Date for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/projects/{projectId}/process',
    tags=['project_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_process_id(project_id: str = Path(..., alias='projectId')):
    """
    Returns process id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/sourceLanguage',
    description=""" Updates source language for a project. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_source_language(
    project_id: str = Path(..., alias='projectId'), body: SourceLanguageDTO = ...
):
    """
    Updates source language for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/specialization',
    description=""" Updates specialization for a project. """,
    tags=['project_management', 'job_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_specialization(
    project_id: str = Path(..., alias='projectId'), body: SpecializationDTO = ...
):
    """
    Updates specialization for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/status',
    description=""" Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>CANCELLED – available when the job has one of the following statuses: OPEN, STARTED</li></ul> """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_status_2(
    project_id: str = Path(..., alias='projectId'), body: ProjectStatusDTO = ...
):
    """
    Changes project status if possible (400 Bad Request is returned otherwise).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/targetLanguages',
    description=""" Updates target languages for a project. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_target_languages(
    project_id: str = Path(..., alias='projectId'), body: TargetLanguagesDTO = ...
):
    """
    Updates target languages for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/vendorInstructions',
    description=""" Updates instructions for all vendors performing the jobs in a project. See also "PUT /jobs/{jobId}/instructions" for updating instructions for a specific job in a project or quote. """,
    tags=['job_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_vendor_instructions(
    project_id: str = Path(..., alias='projectId'), body: StringDTO = ...
):
    """
    Updates instructions for all vendors performing the jobs in a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/projects/{projectId}/volume',
    description=""" Updates volume for a project. """,
    tags=['project_management', 'financial_management', 'finance_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_volume(
    project_id: str = Path(..., alias='projectId'), body: BigDecimalDTO = ...
):
    """
    Updates volume for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/quotes',
    description=""" Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead. """,
    tags=['quote_management', 'quote_updates_management', 'quote_status_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_7(body: QuoteCreateDTO = None):
    """
    Creates a new Smart Quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/quotes/files/archive',
    description=""" Prepares a ZIP archive that contains the specified files. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def archive_1():
    """
    Prepares a ZIP archive that contains the specified files.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/files/{fileId}',
    description=""" Returns details of a file. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_by_id_3(file_id: str = Path(..., alias='fileId')):
    """
    Returns details of a file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/files/{fileId}/download/{fileName}',
    description=""" Downloads a file content. """,
    tags=['file_operations', 'file_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_file_content_by_id_1(
    file_id: str = Path(..., alias='fileId'),
    file_name: str = Path(..., alias='fileName'),
):
    """
    Downloads a file content.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}',
    description=""" Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead. """,
    tags=['quote_management', 'quote_status_management', 'quote_notes_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_by_id_10(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns quote details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/businessDays',
    description=""" Updates Business Days for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_business_days(quote_id: str = Path(..., alias='quoteId'), body: int = ...):
    """
    Updates Business Days for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}/clientContacts',
    description=""" Returns Client Contacts information for a quote. """,
    tags=['client_management', 'quote_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_contacts_3(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns Client Contacts information for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/clientContacts',
    description=""" Updates Client Contacts for a quote. """,
    tags=[
        'quote_management',
        'client_management',
        'person_management',
        'quote_updates_management',
    ],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_contacts_3(quote_id: str = Path(..., alias='quoteId')):
    """
    Updates Client Contacts for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/clientNotes',
    description=""" Updates Client Notes for a quote. """,
    tags=['quote_notes_management', 'quote_management', 'project_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_notes_1(
    quote_id: str = Path(..., alias='quoteId'), body: StringDTO = ...
):
    """
    Updates Client Notes for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/clientReferenceNumber',
    description=""" Updates Client Reference Number for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_client_reference_number_1(
    quote_id: str = Path(..., alias='quoteId'), body: StringDTO = ...
):
    """
    Updates Client Reference Number for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}/customFields',
    description=""" Returns a list of custom field keys and values for a project. """,
    tags=['custom_field_management', 'quote_management', 'custom_field_handling'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_custom_fields_9(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns a list of custom field keys and values for a project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/customFields/{key}',
    description=""" Updates a custom field with a specified key in a quote. """,
    tags=['custom_field_management', 'quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_custom_field_3(
    quote_id: str = Path(..., alias='quoteId'),
    key: str = ...,
    body: SmartCustomFieldDTO = ...,
):
    """
    Updates a custom field with a specified key in a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/expectedDeliveryDate',
    description=""" Updates Expected Delivery Date for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_expected_delivery_date(
    quote_id: str = Path(..., alias='quoteId'), body: TimeDTO = ...
):
    """
    Updates Expected Delivery Date for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}/files',
    description=""" Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed. """,
    tags=['file_management', 'quote_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_files_1(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns list of files in a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/files/add',
    description=""" Adds files to the quote as added by PM. The files have to be uploaded beforehand (see "POST v2/quotes/{quoteId}/files/upload" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul> """,
    tags=['quote_management', 'file_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def add_files_2(quote_id: str = Path(..., alias='quoteId'), body: TimeDTO = ...):
    """
    Adds files to the quote as added by PM.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/quotes/{quoteId}/files/upload',
    description=""" Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see "PUT /v2/quotes/{quoteId}/files/add" operation). """,
    tags=['file_operations', 'file_management', 'quote_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def upload_file_3(quote_id: str = Path(..., alias='quoteId'), file: UploadFile = ...):
    """
    Uploads file to the quote as a file uploaded by PM.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}/finance',
    description=""" Returns finance information for a quote. """,
    tags=['quote_management', 'finance_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_finance_3(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns finance information for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/quotes/{quoteId}/finance/payables',
    description=""" Adds a payable to a quote. """,
    tags=['payable_management', 'quote_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_payable_3(
    quote_id: str = Path(..., alias='quoteId'), body: PayableCreateDTO = ...
):
    """
    Adds a payable to a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/quotes/{quoteId}/finance/payables/{payableId}',
    description=""" Deletes a payable. """,
    tags=['payable_management', 'invoice_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_payable_3(
    quote_id: str = Path(..., alias='quoteId'),
    payable_id: int = Path(..., alias='payableId'),
):
    """
    Deletes a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/finance/payables/{payableId}',
    description=""" Updates a payable. """,
    tags=['payable_management', 'quote_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_payable_3(
    quote_id: str = Path(..., alias='quoteId'),
    payable_id: int = Path(..., alias='payableId'),
    body: PayableDTO = ...,
):
    """
    Updates a payable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/quotes/{quoteId}/finance/receivables',
    description=""" Adds a receivable to a quote. """,
    tags=['receivable_management', 'quote_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def create_receivable_3(
    quote_id: str = Path(..., alias='quoteId'), body: ReceivableCreateDTO = ...
):
    """
    Adds a receivable to a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/quotes/{quoteId}/finance/receivables/{receivableId}',
    description=""" Deletes a receivable. """,
    tags=['receivable_management', 'financial_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def delete_receivable_3(
    quote_id: str = Path(..., alias='quoteId'),
    receivable_id: int = Path(..., alias='receivableId'),
):
    """
    Deletes a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/finance/receivables/{receivableId}',
    description=""" Updates a receivable. """,
    tags=['receivable_management', 'financial_management', 'invoice_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_receivable_3(
    quote_id: str = Path(..., alias='quoteId'),
    receivable_id: int = Path(..., alias='receivableId'),
    body: ReceivableDTO = ...,
):
    """
    Updates a receivable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/internalNotes',
    description=""" Updates Internal Notes for a quote. """,
    tags=['quote_management', 'quote_notes_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_internal_notes_1(
    quote_id: str = Path(..., alias='quoteId'), body: StringDTO = ...
):
    """
    Updates Internal Notes for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/quotes/{quoteId}/jobs',
    description=""" Returns list of jobs in a quote. """,
    tags=['quote_job_management', 'quote_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def get_jobs_1(quote_id: str = Path(..., alias='quoteId')):
    """
    Returns list of jobs in a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/quoteExpiry',
    description=""" Updates Quote Expiry Date for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_quote_expiry(
    quote_id: str = Path(..., alias='quoteId'), body: TimeDTO = ...
):
    """
    Updates Quote Expiry Date for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/sourceLanguage',
    description=""" Updates source language for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_source_language_1(
    quote_id: str = Path(..., alias='quoteId'), body: SourceLanguageDTO = ...
):
    """
    Updates source language for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/specialization',
    description=""" Updates specialization for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_specialization_1(
    quote_id: str = Path(..., alias='quoteId'), body: SpecializationDTO = ...
):
    """
    Updates specialization for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/status',
    description=""" Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED</li><li>SENT – available when the job has one of the following statuses: PENDING</li><li>APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT</li><li>REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT</li></ul> """,
    tags=['quote_management', 'quote_status_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def change_status_3(
    quote_id: str = Path(..., alias='quoteId'), body: ProjectStatusDTO = ...
):
    """
    Changes quote status if possible (400 Bad Request is returned otherwise).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/targetLanguages',
    description=""" Updates target languages for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_target_languages_1(
    quote_id: str = Path(..., alias='quoteId'), body: TargetLanguagesDTO = ...
):
    """
    Updates target languages for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/vendorInstructions',
    description=""" Updates instructions for all vendors performing the jobs in a quote. See also "PUT /jobs/{jobId}/instructions" for updating instructions for a specific job in a project or quote. """,
    tags=['job_management', 'quote_instruction_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_vendor_instructions_1(
    quote_id: str = Path(..., alias='quoteId'), body: StringDTO = ...
):
    """
    Updates instructions for all vendors performing the jobs in a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/quotes/{quoteId}/volume',
    description=""" Updates volume for a quote. """,
    tags=['quote_management', 'quote_updates_management'],
    security=[
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
        APIKeyHeader(name="X-AUTH-ACCESS-TOKEN"),
    ],
)
def update_volume_1(
    quote_id: str = Path(..., alias='quoteId'), body: BigDecimalDTO = ...
):
    """
    Updates volume for a quote.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
